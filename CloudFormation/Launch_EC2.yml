---
AWSTemplateFormatVersion: '2010-09-09'

Description: Create an AWS EC2 instance with a Ansible.

# Create the following AWS resources:
#
# - A security group for ssh  access to the EC2 instance (SGEC2)
# - An Amazon EC2 instance running Amazon Linux 2 (EC2Instance)
#
# Then:
#
# - Install Ansible
# - Configure Ansible hosts file.

Parameters:

  KeyName: 
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: "Can contain only ASCII characters."

  AzName:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Select Availability Zone

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select VPC

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select subnet

  SSHLocation: 
    Description: "The IP address range that can be used to SSH to the EC2 instances"
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: "0.0.0.0/0"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x"

  LatestAmazonLinux2AmiId:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
  SGEC2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable ssh access form bastion host.
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SSHLocation
      VpcId: !Ref VpcId

  AnsibleS3BucketsInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
       - Ref: AnsibleS3BucketsRole

  AnsibleS3BucketsPolicy: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: AnsibleS3BucketsPolicy
      PolicyDocument: 
        Statement: 
         - Effect: Allow
           Action: 
            - "s3:*"
           Resource: "*"
      Roles: 
        - Ref: AnsibleS3BucketsRole

  AnsibleS3BucketsRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
         - Effect: Allow
           Principal: 
             Service: 
               - "ec2.amazonaws.com"
           Action: 
               - "sts:AssumeRole"
      Path: "/"

  EC2Instance:
    Type: AWS::EC2::Instance

    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M

    Properties:
      AvailabilityZone: !Ref AzName
      ImageId: ami-013d826abcb53dbdd
      BlockDeviceMappings:
        # Create a separate volume
        - DeviceName: /dev/sdf
          Ebs:
            DeleteOnTermination: false
            VolumeSize: 30
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref AnsibleS3BucketsInstanceProfile
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: t2.micro
      Monitoring: 'true'
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        GroupSet:
        - !Ref SGEC2
        SubnetId: !Ref SubnetId
      Tenancy: default
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          rpm -Uhv http://satprod2.cc.emory.edu/pub/katello-ca-consumer-latest.noarch.rpm
          subscription-manager register --org="EMORY-LITS_Organization" --activationkey="RHEL_7_DEV"
          yum check-update
          yum clean all
          subscription-manager refresh
          yum install katello-agent -y

          echo "Installing packages..."

          yum install git -y
          yum install curl -y


          mkfs -t ext4 /dev/xvdf
          mount /dev/xvdf /opt
          echo "/dev/xvdf /opt ext4      defaults    0 0" >> /etc/fstab


          yum install -y python-setuptools
          yum install -y wget
          mkdir -p /cft/aws/bin
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          easy_install --script-dir /cft/aws/bin aws-cfn-bootstrap-latest.tar.gz

          curl -o epel-release-latest-7.noarch.rpm  https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
          rpm -i epel-release-latest-7.noarch.rpm
          yum install ansible -y
          pip install boto3
          export no_proxy='127.0.0.1,localhost,satprod2.cc.emory.edu,satellite.service.emory.edu,169.254.169.254'
          unset http_proxy
          unset https_proxy
          git clone https://github.com/vijayinaws/ec2_oracle_install.git
          cd ec2_oracle_install/Ansible/
          ansible-playbook -i hosts playbook.yml --connection=local -vvv

          /cft/aws/bin/cfn-signal \
            -e $? \
            --stack ${AWS::StackName} \
            --resource EC2Instance \
            --region ${AWS::Region}

Outputs:
  EC2InstanceId:
    Description: EC2Instance Instance Id
    Value: !Ref EC2Instance

  EC2InstanceIP:
    Description: EC2Instance IP Address
    Value: !GetAtt EC2Instance.PublicIp