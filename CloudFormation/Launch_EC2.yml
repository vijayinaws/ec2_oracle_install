---
AWSTemplateFormatVersion: '2010-09-09'

Description: Create an AWS EC2 instance with a Ansible.

# Create the following AWS resources:
#
# - A security group for ssh  access to the EC2 instance (SGEC2)
# - An Amazon EC2 instance running Amazon Linux 2 (EC2Instance)
#
# Then:
#
# - Install Ansible
# - Configure Ansible hosts file.

Parameters:

  InstanceType:
    Description: Select EC2 instance type
    Type: String
    Default: t2.large
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
  
  KeyName: 
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: "Can contain only ASCII characters."

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select VPC

  AzName:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Select Availability Zone

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Select subnet

  SSHLocation: 
    Description: "The IP address range that can be used to SSH to the EC2 instances"
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: "0.0.0.0/0"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x"

  AmiId:
    Description: Amazon Machine Image for EC2 instance.
    Type : String
    Default: 'ami-013d826abcb53dbdd'

Resources:
  SGEC2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable ssh access form bastion host.
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SSHLocation
      VpcId: !Ref VpcId

  EC2InstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
       - Ref: S3BucketsRole

  S3BucketsPolicy: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: S3BucketsPolicy
      PolicyDocument: 
        Statement: 
         - Effect: Allow
           Action: 
            - "s3:*"
           Resource: "*"
      Roles: 
        - Ref: S3BucketsRole

  S3BucketsRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
         - Effect: Allow
           Principal: 
             Service: 
               - "ec2.amazonaws.com"
           Action: 
               - "sts:AssumeRole"
      Path: "/"

  EC2Instance:
    Type: AWS::EC2::Instance

    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
    
    Metadata:
      AWS::CloudFormation::Init:
        config:

          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack = ${AWS::StackId}
                region = ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
    
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                action=/cft/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: "root"
              group: "root"

            /lib/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/cft/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target              
    
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service
            
    Properties:
      AvailabilityZone: !Ref AzName
      ImageId: !Ref AmiId
      BlockDeviceMappings:
        - DeviceName: /dev/sdf
          Ebs:
            DeleteOnTermination: false
            VolumeSize: 30
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref EC2InstanceProfile
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !Ref InstanceType
      Monitoring: 'true'
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        GroupSet:
        - !Ref SGEC2
        SubnetId: !Ref SubnetId
      Tenancy: default
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash 
          rpm -Uhv http://satprod2.cc.emory.edu/pub/katello-ca-consumer-latest.noarch.rpm
          subscription-manager register --org="EMORY-LITS_Organization" --activationkey="RHEL_7_DEV"
          yum check-update
          yum clean all
          subscription-manager refresh
          yum install katello-agent -y
    

          echo "Installing packages..."

          yum install git -y
          yum install curl -y


          mkfs -t ext4 /dev/xvdf
          mount /dev/xvdf /opt
          echo "/dev/xvdf /opt ext4      defaults    0 0" >> /etc/fstab


          yum install -y python-setuptools
          yum install -y wget
          mkdir -p /cft/aws/bin
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          easy_install --script-dir /cft/aws/bin aws-cfn-bootstrap-latest.tar.gz
          export no_proxy='127.0.0.1,localhost,satprod2.cc.emory.edu,satellite.service.emory.edu,169.254.169.254'
          unset http_proxy
          unset https_proxy
          
          #yum install -y aws-cfn-bootstrap
          /cft/aws/bin/cfn-init -v  --stack ${AWS::StackName} --resource EC2Instance  --region ${AWS::Region} 

          curl -o epel-release-latest-7.noarch.rpm  https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
          rpm -i epel-release-latest-7.noarch.rpm
          yum install ansible -y
          pip install boto3
          
          git clone https://github.com/vijayinaws/ec2_oracle_install.git
          cd /ec2_oracle_install/Ansible/
          ansible-playbook -i hosts playbook.yml --connection=local -vvv >> ansible-output.log

          /cft/aws/bin/cfn-signal  -e 0  --stack ${AWS::StackName}   --resource EC2Instance     --region ${AWS::Region} 


Outputs:
  EC2InstanceId:
    Description: 'The EC2 instance id.'
    Value: !Ref EC2Instance

  PrivateIPAddress:
    Description: 'The private IP address of the EC2 instance.'
    Value: !GetAtt EC2Instance.PrivateIp